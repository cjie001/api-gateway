worker_processes auto;
error_log  logs/error.log  debug;

events {
    worker_connections 1024;
}

http {
    include       mime.types;

    # 声明变量（必须放在 http 块顶部）
    variables_hash_max_size 2048;
    variables_hash_bucket_size 128;

    real_ip_header X-Real-IP;
    set_real_ip_from 127.0.0.1;
    set_real_ip_from unix:;
    more_set_headers 'Server: C-API Gateway';

    # 基础性能优化
    sendfile on;                # 启用高效文件传输模式
    tcp_nopush on;              # 仅在sendfile开启时有效，合并数据包减少发送次数
    tcp_nodelay on;             # 禁用Nagle算法，提高实时性

    keepalive_timeout  65;      # 客户端连接保持时间
    keepalive_requests 10000;   # 单个keepalive连接的最大请求数

    # 客户端请求体缓冲区大小
    client_body_buffer_size 128k;
    client_header_buffer_size 4k;
    client_max_body_size 8m;
    large_client_header_buffers 4 16k;

    lua_code_cache on;
    lua_package_path "$prefix/lua/?.lua;;";
    lua_shared_dict routes 10m;
    lua_shared_dict upstreams 10m;
    lua_shared_dict route_key_maps 10m;
    lua_shared_dict settings 1m;
    lua_shared_dict checker_status 10m;  # 用于存储健康检查状态
    lua_shared_dict ewma_latencies 10m;  # 用于EWMA算法
    lua_shared_dict limit_conn_store 100m;
    lua_shared_dict limit_req_store 100m;
    lua_shared_dict limit_count_store 100m;
    lua_shared_dict circuit_breaker 10m;
    lua_shared_dict delay_dict 1m;   # mock延时参数
    
    init_by_lua_block {
        require("resty.core")
        local admin = require("admin")
        admin.init()
    }
    
    server {
        listen 9000;
        
        set $upstream '';
        set $upstream_host '';

        location / {
            access_by_lua_block {
                local router = require("router")
                router.route()
            }
            
            proxy_pass $upstream;
            proxy_set_header Host $host;
        }
        
        location /admin {
            access_by_lua_block {
                local admin = require("admin")
                admin.handle_request()
            }
            
            content_by_lua_block {
                ngx.say("{\"code\": 0, \"message\": \"success\"}")
            }
        }
    }

    # MockServer, 可移除
    server {
        listen       9001;
        server_name  localhost;

        default_type application/json;

        # 匹配所有其他请求
        location ~ / {
            content_by_lua_block {
                require ("mock").mock_response()
            }
        }
    }

    server {
        listen       9002;
        server_name  localhost;

        default_type application/json;

        # 匹配所有其他请求
        location ~ / {
            content_by_lua_block {
                require ("mock").mock_response()
            }
        }
    }
}
